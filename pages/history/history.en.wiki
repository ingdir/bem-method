==The History of BEM

Once upon a time, in a distant country far-far away, an IT company named Yandex started developing web search and affiliated services. Time went by and services were growing, and more and more frontend developers put their tireless efforts into improving the ecosystem of Yandex. Great things they did, and amazing tools they built, making their developers' lives easier, and times now have come to share that knowledge with the community, to embrace the magic power of Open Source and benefit all good people around.

This article describes the evolution of frontend development at Yandex, so you can follow our efforts up from the very beginning and better understand the challenges a big company faces when gradually building an entire ecosystem of services with the ever-growing developer team.

Frontend developers are well known for their enormous curiosity (that often brings innovation) and their remarkable laziness that makes them devise sophisticated systems to save precious time, to unify and automate everything.

Let's travel back in time to 2005 and sneak a peek over a shoulder of a really-really-busy Yandex frontend developer, and thus see...

=== ...Where It All Began

Back in 2005, the focus was still pretty much on the server side of things. From frontender's perspective, a typical Yandex project was a set of static HTML pages used as a base reference to build advanced templates like XSL style sheets. These pages were kept in a separate folder which looked like this after a checkout:

%%hl xml
about.html
index.html
…
project.css
project.js
i/
    yandex.png
%%

There was a static HTML file for each page, with all the CSS pushed into a single style sheet, ##project.css##, and all JavaScript placed in a single ##project.js##; both files were shared between all project pages. Back in 2005, JavaScript was only sparsely applied here and there, so all the interaction magic for the whole project could fit comfortably into a small file. Images resided in a separate folder, as they were numerous. With IE 5 roaming in the wild and no CSS3, images were used for all sorts of eye-candy, even for rounded corners (none of the younger web developers would probably believe me :-)).

To retain basic structure, style definitions for different page sections were separated using plain CSS comments:


%%hl xml
/* Content container (begin) */
    #body
        {
            font: 0.8em Arial, sans-serif;

            margin: 0.5em 1.95% 0.5em 2%;
        }
/* Content container (end) */

/* Graphical banner (begin) */
    .banner
        {
            text-align: center;
        }

    .banner a
        {
            text-decoration: none;
        }
/* Graphical banner (end) */
%%

Both IDs and class names were used in the HTML markup.

Bits of HTML were manually pasted into production XSL style sheets, and all changes were synced two-way, manually. That was hard, and when it wasn't hard, it was dull.

===Mid-Scale Projects

At the beginning of 2006, the first version of Yandex.Music had been under heavy development. Multiple pages, each unlike the other, didn't fit well into familiar simplistic concepts. Dozens of CSS classes you had to invent meaningful names for, a growing number of unintentional dependencies spreading across the project -- all that had been calling for a better solution.

Typical piece of CSS code from those days:

%%hl xml
    /* Albums (begin) */
        .result .albums .info
            {
                padding-right: 8.5em;
            }

        .result .albums .title
            {
                float: left;

                padding-bottom: 0.3em;
            }

        .result .albums .album .listen
            {
                float: left;

                padding: 0.3em 1em 0 1em;
            }

        .result .albums .album .buy
            {
                float: left;

                padding: 0.4em 1em 0 1.6em;
            }

        .result .albums .info i
            {
                font-size: 85%;
            }
    /* Albums (end) */
%%

Long cascading rules are used throughout the code.

Have another look:

%%hl xml
    /* Background images (begin) */
        .b-foot div
            {
                height: 71px;

                background: transparent url(../i/foot-1.png) 4% 50% no-repeat;
            }

        .b-foot div div
            {
                background-position: 21%;
                background-image: url(../i/foot-2.png);
            }

        .b-foot div div div
            {
                background-position: 38%;
                background-image: url(../i/foot-3.png);
            }

        .b-foot div div div div
            {
                background-position: 54%;
                background-image: url(../i/foot-4.png);
            }

        .b-foot div div div div div
            {
                background-position: 71%;
                background-image: url(../i/foot-5.png);
            }

        .b-foot div div div div div div
            {
                background-position: 87%;
                background-image: url(../i/foot-6.png);
            }
    /* Background images (end) */
%%

See that ##id## and tag names selectors are used in many rules.

At the same time, an even bigger project was started ((http://wow.yandex.ru wow.ya.ru)) -- a blogging platform, a place for people to interact, to share, to read and to engage.\\
There were dozens of various pages to support, and with the old-fashioned approach the code was running out of control on so many levels...

====Blocks to the Rescue

We needed to specify a data domain for managing page interface objects. This was a methodology thing, we needed to put more clarity into the way we work with concepts like ##class##, ##tag##, ##visual component## etc.

For a typical web page of a Yandex project, HTML structure and its CSS styles were still the focus of our development efforts, with JavaScript being a supplementary technology. For easier maintenance of HTML/CSS for many components, a new term was invented: ##block##. Block is a part of a page design or layout having its specific and unique meaning defined either semantically, or visually.

In most cases, any distinct page element (either complex or simple) may be considered a block. Its HTML container gets a unique CSS class, which is also used as a block name.

CSS classes for blocks got prefixes (##b-##, ##c-##, ##g-##) to provide sort of a namespace emulation in CSS. The naming convention itself was changed later, here's the initial list explained:

 * **b-**  block\\
   an independent block, placed on a page wherever you need it
 * **с-**  control\\
   a control (an independent block) with a JavaScript object bound to it
 * **g-**  global\\
   a global definition, used sparingly and always defined for a specific, unique purpose; the number of these definitions was kept at a minimum.

Some suffixes were employed as well, e.g.:
 * **-nojs**   no javascript\\
   Style rule to be applied with JavaScript turned off.
   The onload callback may contain an ##init()## function call that removes these suffixes from all DOM nodes, semantically marking them up as "JavaScript-enabled".

====What's Inside?

In an HTML container holding a block, some inner nodes get distinct CSS class names as well. This not only facilitates the creation of tagname-independent style rules, but also assigns semantically meaningful roles to each node. Such inner nodes are called "block elements", or simply "elements".

The core distinction between a block and an element is the element's inability to exist out of its parent block's context. As long as you cannot detach something from a block, it's an element; detachable elements (probably) should become blocks themselves.

At first, elements could have been existed inside their parent block's container only; later, a technique was provided to place some elements outside and still keep a block consistent.

In style sheets, elements with lots of CSS got extra indentation and were wrapped in comments:

%%hl xml
    /* Head (begin) */
        .b-head { … }

        /* Logo (begin) */
            .b-head .logo { … }
            .b-head .logo a { … }
        /* Logo (end) */

        /* Right side (begin) */
        .b-head .right { … }

            /* Info (begin) */
                .b-head .info { … }
                .b-head .info .exit a { … }
            /* Info (end) */

            /* Search (begin) */
                .b-head .search { … }
                .b-head .search div div, .b-head .search div div i { … }
            /* Search (end) */
        /* Right side (end) */
    /* Head (end) */
%%

====Project File Structure Evolves

At Yandex, a frontend developer usually supports more than one project. Switching between different repositories and various branches is easier when all projects use the same (or quite similar) file structure. Granularity is another requirement as it provides more flexibility for version control systems and helps avoid conflicts during concurrent development.

This led us to a more unified structure: CSS, JavaScript, and image files reside in separate folders. In CSS, there are dedicated files for IE-specific workarounds to keep main code clean and standard-compliant. In production, IE gets its well-earned CSS hackery via IE-only conditional comments. 

JavaScript was employed more and more, thus the addition of optional components and libraries.

Typical file structure:

%%hl xml
index.html
css/
    yaru.css
    yaru-ie.css
js/
    yaru.js
i/
    yandex.png
%%

MSIE-specific hacks could have gone into the main CSS file (##yaru.css##) if they were in compliance with the CSS standards:

%%hl xml
    /* Common definitions (begin) */
        body
            {
                font-family: Arial, sans-serif;
                font-size: 0.8em;

                padding: 0 0 2em 0;
                background: #fff;
            }

        * html body
            {
                font-size: 80%;
            }
%%

Non-valid workarounds were put in a standalone ##yaru-ie.css## (loaded with IE-only conditional comments).

%%hl xml
    /* Common blocks (begin) */
        /* Artist (begin) */
            .b-artist .i i
                {
                    top: expression(7 + (90 - this.parentNode.getElementsByTagName('img')[0].height)/2);
                    filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../i/sticker-lt.png', sizingMethod='crop');
                }
%%

===Building up a Framework: the Beginning

Designing similar projects eventually leads to re-creating the same blocks over and over again. Yandex is a portal and offers more than a hundred services sharing the same corporate style, so careless copy/paste doesn't work well on this scale. Just to have something to begin with, we had built a small compilation of reusable components, which inside Yandex had been referred to as "common blocks library", or simply "The Common".

First page fragments to be unified were header, footer and some typographic CSS definitions. Corresponding files were hosted on an internal dedicated server (**common.cloudkill.yandex.ru** in the listings below).

These were early days of our unified framework.

Styles could be imported directly from that server:

%%hl xml
@import url(http://common.cloudkill.yandex.ru/css/global.css);
@import url(http://common.cloudkill.yandex.ru/css/head/common.css);
@import url(http://common.cloudkill.yandex.ru/css/static-text.css);
@import url(http://common.cloudkill.yandex.ru/css/foot/common-absolute.css);
@import url(http://common.cloudkill.yandex.ru/css/foot/common-absolute-4-columns.css);
@import url(http://common.cloudkill.yandex.ru/css/list/hlist.css);
@import url(http://common.cloudkill.yandex.ru/css/list/hlist-middot.css);
@import url(http://common.cloudkill.yandex.ru/css/dropdown/dropdown.css);
@import url(http://common.cloudkill.yandex.ru/css/dropdown/dropdown-arrow.css);
@import url(slider.css);

/* Header (begin) */
    /* Service (begin) */
        .b-head .service h1 { … }
        .b-head .service h1, .b-head .service h1 a, .b-head .service h1 b { … }
%%

Obviously, too many imports! So, we decided to precompile styles (and later, JS files) before deployment; compilation replaces ##@import## directives with actual contents of external files (this is called ##inlining##) and performs optimizations. Our internal inlining tool evolved from a simple wrapper script into an open source project ((https://github.com/veged/borschik borschik)); try it out!

===Independent Blocks as a Concept
By the fall of 2007, our everyday practice had got some theory behind it. The Independent Block concept, the basic idea behind our understanding of HTML and CSS layouts, was featured at the ClientSide'2007 Conference in Moscow, Russia.

In that presentation, the first attempt to define a ##block## had been made.

==== Blocks: the Declaration of Independence
In our attempt to produce a formal (in fact, semi-formal) declaration of ##block##, the following 3 principles were highlighted:

 1. Only class names (not IDs) should be used to write styles;
 1. Each block's class name should have a prefix;
 1. Any CSS rule except those prefixed with g- must belong to a block.

As soon as unique IDs are dropped, the same block can be used on the same page more than once. This also allows two or more classes to co-exist on the same DOM node, which turned out to be quite useful later.

=====Blocks Simple and Compound: the Misclassification

We defined ##simple## blocks as not being designed to contain other blocks anywhere inside.
##Compound## blocks, on the contrary, were allowed (or even required) to embed nested blocks.

This classification was naive; even the simplest blocks sometimes were wrapped around other blocks and had to be "upgraded" and refactored to fit the new role. This misclassification, in fact, had struck back in so many cases that we had finally accepted the opposite principle: any block should allow for arbitrary content to be embedded, whenever possible.

=====Completely Independent Blocks
CSS definitions aren't bulletproof when on a single page we mix a lot of styled content originating from different sources. In complex layouts, blocks may alter each other's appearance because of element names conflicts. Tagname-based CSS rules may match more nodes than intended. Therefore, a stricter version of an independent block (named Absolutely Independent Block, abbreviated AIB) had been defined, with the following extra rules:

 1. never match CSS to tag names, use class names for everything:\\
    ##.b-user b -> .b-user .first-letter##
 2. class names for block elements must be prefixed with a parent block name:\\
    ##.b-user .first-letter -> .b-user-first_letter##

Such class names tend to be much longer, and the resulting HTML code is considerably bigger in size.\\
This was the main reason why AIB was considered a "costly solution", used more as a remedy, not as an everyday practice.

=====Prefixes
As you are definitely aware, choosing variable names is among the most difficult problems in development, ever. We approached it cautiously and invented four prefixes allowed in block names, each with its own semantics.

 * **b-**\\
   common blocks
 * **h-**\\
   holsters, used for gluing several elements together
 * **l-**\\
   layout grids
 * **g-**\\
   global styles

=====Modifications

##Modification## can be defined as a specific state of a block, or as a flag that holds a specific property.
This is best explained with an example: a block representing a button may have three default sizes: small, normal, and big. Instead of creating 3 different blocks, assign a ##modification## to your block. The modification requires a name (e.g. "size") and a value ("small", "normal", or "big").

There are two reasons for a block to get a modification:

 1. Block may alter its presentation because of its placement in the layout.
    Such modification is called ##context-dependent##.
 1. An additional (postfixed) class name may change block's appearance. This is a context-independent (postfix-based) modification.\\
##class="b-block b-block-postfix"##

===Unified Portal-Wide Framework
At the beginning of 2008, Yandex had been going through a major review of its internal design policies. We decided to create a brand book (for internal use) to enforce best practices in interface design, company-wide.

This task was assigned to the front-end team, and after some pondering of options, we decided to proceed with technologies we were the most proficient with, namely: HTML and CSS code.\\

Interfaces evolve fast, so fast that any long-term attempt to describe interfaces with words and pictures will become obsolete even before completion. We needed a brand book that would represent our interfaces as they were: changing rapidly and still unified between different Yandex services and products.

Therefore, we decided that our interface brand book should be built with the same blocks we used to build our web sites. Blocks could be shared between projects and represent the latest in Yandex interface design.

We decided to build a portal-wide framework of blocks so all could benefit from it and contribute back. The project was internally named ##Lego##.

====Lego Repository Structure, First Approach
The topmost level corresponded to various available ##implementations##:

%%hl xml
css/
html/
js/
xml/
xsl/
%%

Each implementation contained its own folder sub-structure.

CSS went into 3 different folders:

%%hl xml
css/
    block/
        b-dropdown/
            b-dropdown.css
    service/
        auto/
            block/
                b-head-logo-auto.css
            head.css
    util/
        b-hmenu/
            b-hmenu.css
%%

 1. block -- blocks shared between services
 1. util -- general-purpose blocks ready to be open sourced
 1. service -- CSS styles for specific Yandex services, used for branding, header/footer etc.

HTML folder structure was identical to CSS:

%%hl xml
html/
    block/
        b-dropdown.html
    service/
        auto/
            l-head.html
    util/
        b-hmenu.html
%%

JavaScript was yet loosely structured and used inconsistently between services:

%%hl xml
js/
    check-is-frame.js
    check-session.js
    clean-on-focus.js
    dropdown.js
    event.add.js
    event.del.js
%%

Each service had a corresponding XML file semantically describing its page header (and providing necessary project-specific data), which in conjunction with an XSL stylesheet was enough to generate header HTML code.

%%hl xml
xml/
    block/
        b-head-tabs-communication.xml
        common-services.ru.xml
        head-messages.ru.xml
    service/
        auto/
            head.xml
%%

XSL templates for various blocks (one file per block) were contained in one folder:

%%hl xml
xsl/
    block/
        b-dropdown.xsl
        b-head-line.xsl
        i-common.xsl
        i-locale.xsl
        l-foot.xsl
        l-head.xsl
%%

What about integration?

Lego is linked to projects with the help of a version control feature known as ##svn:externals##.

When a package is built for production deployment, the external library (Lego) code is embedded into the package; this is similar to static library linking in compiled languages.

Lego provides an SVN branch for each of its major releases; sticking to a branch in svn:externals allows for hotfixes to arrive to a project; for extreme stability, project can freeze at a specific Lego revision. In either case, major versions switches can be prepared and made whenever necessary.

This simple technique proved quite flexible and is employed up to this day by many Yandex services.

=====Per-Page Files
CSS files imported rule definitions for blocks used on a page from the Lego folder structure.

%%hl xml
@import url(../../block/l-head/l-head.css);
@import url(../../block/b-head-logo/b-head-logo.css);
@import url(../../block/b-head-logo/b-head-logo_name.css);
@import url(block/b-head-logo-auto.css);
%%

The consistency of import directives was maintained manually.

At that point, we didn't yet come to a unified file naming convention and tried several approaches.

=== Portal-Wide Framework: Lego 1.2 (2008)
Upon releasing Lego version 1.2, the code had been refactored and folder structure had changed.

%%hl xml
common/
    css/
    js/
    xml/
    xsl/
example/
    html/
service/
    auto/
        css/
        xml/
%%

Blocks previously separated and placed in ##util## and ##block## folders are now combined. Common styles shared by most blocks are stored in common/css.\\
We had been pondering the possibility of open-sourcing the code but postponed it until two years later.

%%hl xml
common/
    css/
        b-dropdown/
            arr/
                b-dropdown.arr.css
                b-dropdown.arr.ie.css
                b-dropdown.css
                b-dropdown.ie.css
%%

MSIE-specific styles were renamed from *-ie.css to *.ie.css.

All contents of optional CSS files (such as ##b-dropdown_arr.css##) was moved into separate folders (##arr/b-dropdown.arr.css##).\\

For classname-based modification of a block, the underscore was assigned as a separator, replacing a single dash that was used previously.\\
This made a block name visually separated from a modifier name, and proved quite useful while developing automated tools, as it allowed for unambiguous search and pattern matching.

===BEM, est. 2009
In March of 2009, Lego 2.0 had been released.\\
That event marks the beginning of the BEM methodology.

BEM stands for Block, Element, Modifier; these are three key entities we use to develop web components.

====Lego 2.0 in 2009
What was the key update the 2.0 version had delivered?

It was primacy of the ##block## concept over underlying implementation technologies.

Each block is contained in a separate folder; each technology (CSS, JS, XSL etc.) is represented by a separate file. Documentation just gets its own file type such as ##.wiki##.

What additional terms did we operate on at that time?

=====Terminology Excerpts
##Independent Block## may be used on any web page and placed anywhere in the layout.\\
In XML we apply XSL style sheets to, the block is represented by a node in ##lego## namespace.

XML:

%%hl xml
<lego:l-head>
<lego:b-head-logo>
%%

In HTML, a block container node gets a class name exactly corresponding to the block name.

HTML:

%%hl xml
<table class="l-head">
<div class="b-head-logo">
%%

CSS:

%%hl xml
.l-head
.b-head-logo
%%

All block files (CSS, JS, HTML, XSL) are stored in block's folder:

%%hl xml
    common/
        block/
            b-head-logo/
                b-head-logo.css
                b-head-logo.xsl
                b-head-logo.js
                b-head-logo.wiki
%%

In XML files that describe page structure, blocks are described with nodes in ##lego## namespace; block name prefix is omitted:

%%hl xml
<lego:b-head-logo>
    <lego:name/>
</lego:b-head-logo>
%%

HTML classes inside the block have their prefixes omitted as well.

%%hl xml
<div class="b-head-logo">
    <span class="name">Авто</span>
</div>

.b-head-logo .name { ... }
%%

Files related to inner elements each get their own folder:

%%hl xml
common/
    block/
        b-head-logo/
            name/
                b-head-logo.name.css
                b-head-logo.name.png
                b-head-logo.name.wiki
%%

Modifiers in XML are specified as node attributes in ##lego## namespace:

%%hl xml
<lego:b-head-tabs lego:theme="grey">
%%

In HTML, an extra class name is added:

%%hl xml
<div class="b-head-tabs b-head-tabs_grey">

.b-head-tabs_grey { ... }
%%

Modifier files (styles etc.) go into separate folders prefixed with an underscore:

%%hl xml
common/
    block/
        b-head-logo/
            _theme/
                b-head-logo_gray.css
                b-head-logo_gray.png
                b-head-logo_gray.wiki
%%

===== Declaration in XML
All Lego components used in a project are described in an XML file:

%%hl xml
<lego:page>
    <lego:l-head>
        <lego:b-head-logo>
            <lego:name/>
        </lego:b-head-logo>

        <lego:b-head-tabs type="search-and-content"/>
%%

This XML allows for CSS imports to be generated:

%%hl xml
@import url(../../common/block/global/_type/global_reset.css);
@import url(../../common/block/l-head/l-head.css);
@import url(../../common/block/b-head-logo/b-head-logo.css);
@import url(../../common/block/b-head-logo/name/b-head-logo.name.css);
@import url(../../common/block/b-head-tabs/b-head-tabs.css);
@import url(../../common/block/b-dropdown/b-dropdown.css);
@import url(../../common/block/b-dropdown/text/b-dropdown.text.css);
@import url(../../common/block/b-pseudo-link/b-pseudo-link.css);
@import url(../../common/block/b-dropdown/arrow/b-dropdown.arrow.css);
@import url(../../common/block/b-head-search/b-head-search.css);
@import url(../../common/block/b-head-search/arrow/b-head-search.arrow.css);
@import url(../../common/block/b-search/b-search.css);
@import url(../../common/block/b-search/input/b-search.input.css);
@import url(../../common/block/b-search/sample/b-search.sample.css);
@import url(../../common/block/b-search/precise/b-search.precise.css);
@import url(../../common/block/b-search/button/b-search.button.css);
@import url(../../common/block/b-head-userinfo/b-head-userinfo.css);
@import url(../../common/block/b-head-userinfo/user/b-head-userinfo.user.css);
@import url(../../common/block/b-user/b-user.css);
@import url(../../common/block/b-head-userinfo/service/b-head-userinfo.service.css);
@import url(../../common/block/b-head-userinfo/setup/b-head-userinfo.setup.css);
@import url(../../common/block/b-head-userinfo/region/b-head-userinfo.region.css);
@import url(block/b-head-logo/b-head-logo.css);
@import url(block/b-head-search/b-head-search.css);
%%

This example shows that common styles are imported first; then, project styles add extra definitions or redefine some of the common blocks. This makes project-specific changes possible while maintaining a common shared code base.

Same XML declarations allow for JS includes to be autogenerated.

%%hl js
include("../../common/block/i-locale/i-locale.js");
include("../../common/block/b-dropdown/b-dropdown.js");
include("../../common/block/b-search/sample/b-search.sample.js");
include("../../common/block/b-head-userinfo/user/b-head-userinfo.user.js");
%%

XSL templates imports are autogenerated as well, using the same XML-based definitions:

%%hl xml
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<xsl:import href="../../common/block/i-common/i-common.xsl"/>
<xsl:import href="../../common/block/i-items/i-items.xsl"/>
<xsl:import href="../../common/block/l-head/l-head.xsl"/>
<xsl:import href="../../common/block/b-head-logo/b-head-logo.xsl"/>
<xsl:import href="../../common/block/b-head-logo/name/b-head-logo.name.xsl"/>
<xsl:import href="../../common/block/b-head-tabs/b-head-tabs.xsl"/>
<xsl:import href="../../common/block/b-dropdown/b-dropdown.xsl"/>
<xsl:import href="../../common/block/b-pseudo-link/b-pseudo-link.xsl"/>
<xsl:import href="../../common/block/b-head-search/b-head-search.xsl"/>
<xsl:import href="../../common/block/b-search/b-search.xsl"/>
<xsl:import href="../../common/block/b-search/input/b-search.input.xsl"/>
<xsl:import href="../../common/block/b-search/sample/b-search.sample.xsl"/>
<xsl:import href="../../common/block/b-search/precise/b-search.precise.xsl"/>
<xsl:import href="../../common/block/b-search/button/b-search.button.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/b-head-userinfo.xsl"/>
<xsl:import href="../../common/block/b-user/b-user.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/service/b-head-userinfo.service.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/setup/b-head-userinfo.setup.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/region/b-head-userinfo.region.xsl"/>

</xsl:stylesheet>
%%

Code generation was an important step forward; from this point onwards, we don't have to maintain dependencies manually.

==== CSS Selector Speed, Revisited (2009)

During major redesign of Yandex.Mail service in 2009, interface responsiveness and overall speed were the key goals. We wanted to release a web application that feels as fast as a piece of desktop software, and maybe even faster.

Client-side (in-browser) XSL transformations were employed as a main templating solution (XML with all the data was loaded separately). According to initial measurements, XSL transforms were applied almost instantly, but the resulting HTML code took significant time to append to the DOM. However, disabling all CSS made that problem go away magically.

After studying various factors that could have affected rendering speed, CSS selectors were identified as a major source of the slowdown. The bigger the DOM tree and the CSS style sheet, the longer it takes for all CSS rules to be applied.

There's a summary of our study available (in Russian):
((http://clubs.ya.ru/bem/replies.xml?item_no=338)).

It turned out that switching to simple selectors and eliminating CSS cascade wherever possible made CSS rules apply much faster. Selectors based on a single class name are quick and browser handles them with ease. We already had a solution that could use such selectors: the so-called 
((http://clubs.ya.ru/bem/replies.xml?item_no=338 completely independent blocks)).

All Lego blocks were refactored to comply with the completely independent blocks restrictions. As soon as all class names are unique, most rules use only a single class query and work way faster.

%%hl xml
<div class="b-head-logo">
    <span class="b-head-logo__name">
        Авто
    </span>
</div>
%%

====Establishing Naming Conventions
After taking several attempts to modify naming conventions, we agreed on principles that hadn't changed since then.

In file names, the dot separator was replaced by double underscore __. Before: ##b-block.elem.css##,
after: ##b-block__elem.css##; thus, file names were made consistent with CSS selectors.

Block's elements were allowed to have their own modifiers, too.

##.b-block__elem_theme_green##, similar to ##.b-block_theme_green##.

Modifiers were changed to be a key/value pair:
Before: ##.b-menu__item_current##
After: ##.b-menu__item_state_current##.\\
This change turned out to be useful when working with modifiers from JavaScript.

===Going Open Source (2010)

In 2010, we published some code on ((https://github.com/bem our GitHub account)) to continue growing as an open source project.

====Creating bem-bl Library
Blocks from Lego are being gradually ported to ((https://github.com/bem/bem-bl bem-bl)), a library of blocks we consider useful for any web site, not just a Yandex project. As blocks are gradually open-sourced, we improve code and add new features.

This is very much a work in progress, and we invite everybody to make pull requests :-)

We also develop ((https://github.com/bem/bem-tools bem-tools)), a set of helper scripts and automation utilities that make working with BEM files easier. This is mostly done with Node.js, to keep the barriers low for front-end people familiar with JavaScript and willing to contribute.

====Redefinition Levels in BEM

One size never fits all... but one BEM does! Because blocks and elements are represented on a file system as files and folders, and BEM file structure is unified and based mostly on semantic criteria, we can easily redefine a part of a BEM block, or add functionality. Similar to the way we extend objects in JavaScript, BEM blocks can be extended using the so-called "redefinition levels".

A typical redefinition level may be defined like this:

 1. public bem-bl library pulled from github, extended by...
 1. internal block library (such as Lego), extended by..
 1. project-specific block library.
 
You're free to go and add more levels. You might need some page-specific block improvements... oh, I believe you got the idea.

Example:

%%hl xml
bem-bl/
    b-logo/
lego/
    b-logo/
auto/
    blocks/
        b-logo/
%%

It is also possible to use a custom file structure on a redefinition level; as long as you follow the BEM concept, all you need is to configure our build tools according to your new cool structure. We won't go into much detail here, but there's a configuration file for that:

%%hl xml
.bem/
    level.js
%%

You can specify different file naming patterns, or even flatten your folder structure completely.

==== BEMHTML Templating Engine
We tried different templating solutions, and ended up developing our own, called BEMHTML.

This templating engine:

 1. operates on core BEM (Block, Element, Modifier) terms
 1. supports redefinition levels
 1. precompiles templates into JavaScript code that runs either in a browser, or on a server

More details on BEMHTML is available in Russian here:

 * ((clubs.ya.ru/bem/replies.xml?item_no=898))
 * ((clubs.ya.ru/bem/replies.xml?item_no=899))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1153))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1172))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1391))

===BEM: Try This at Home!

As you can see, BEM has a long history of trial and error. It took Yandex a while to figure out what's important and what is not.

The foundation of the BEM methodology are Block, Element and Modifier; these entities are consistently used in all our projects.

BEM as we know and use it today is not the final truth, nor the revelation, but something constantly being driven by practice, and tested on real-life projects. You can follow this to the extent that you find useful.

BEM is quite flexible, as it is mostly a methodology; there is no such thing as BEM API, or BEM SDK. While we encourage you to try and use the open source tools we provide, which are indeed a BEM framework, you might find BEM principles good enough to be embedded into your products or technologies in some other way.

Let's discuss an example briefly.

====Multiple Blocks in a Single File
I assume you've got a web project and want to give BEM a try by using it here and there in your HTML and CSS.

That's great! It's how we started using BEM, too :-)

Choose the approach you find the easiest to understand and maintain, for example let your block elements have simple (non-prefixed) classes, and use modifiers with a key/value pair:

%%hl xml
.b-block
.b-block .elem
.b-block_size_l
.b-block .elem_size_l
%%

You can go one step further and assign a specific class to all DOM nodes inside your block that have a semantic meaning (we call that "completely independent blocks", see above):

%%hl xml
.b-block
.b-block__elem
.b-block_size_l
.b-block__elem_size_l
%%

Find CSS prefixes too long to type? Remove them!

%%hl xml
.block
.block__elem
.block_size_l
.block__elem_size_l
%%

This is a perfect opportunity to try BEM concepts, and since we don't really have those strict rules, you're not really breaking anything as long as you hold on to the main principle of blocks, elements and modifiers.

Have a single file per each technology you use and put all block declarations together:

%%hl xml
myfacebook/
    myfacebook.css
    myfacebook.js
    myfacebook.html
%%

You have to support all the changes manually at this stage (without bem-tools), but this may shorten the learning curve as well!

====Blocks in a Separate Folder
As your project grows, you'll find it more convenient to have each block in a separate file. Just create an extra folder an put all block declarations there:

%%hl xml
blocks/
    b-myblock.css
    b-myblock.js
    b-yourblock.css
    b-yourblock.js
%%

At this point, you'll need to build your JS and CSS files to combine multiple block declarations into a single one (i.e. gather all individual block styles into a project CSS file). Try bem-tools and see if you find them useful!

====Making Things Optional
Some blocks may have elements or modifiers that you use on certain pages only, or in a specific scenario. You can load optional elements separately to keep the core file small and neat:

%%hl xml
blocks/
    b-myblock/
        b-myblock_mod_val1.css
        b-myblock__opt-elem.css
        b-myblock__opt-elem_mod_val1.css
        b-myblock.css
%%

====Modifiers in Folders
For blocks with many modifiers, put modifiers into separate folders:

%%hl xml
blocks/
    b-myblock/
        _mod/
            b-myblock_mod_val1.css
            b-myblock__opt-elem.css
            b-myblock__opt-elem_mod_val1.css
        b-myblock.css
%%

This will make block's root folder easier to maintain.

====Optional Elements in Folders
Block elements may also become optional and get their separate folders. This is an advanced albeit quite flexible approach.

%%hl xml
blocks/
    b-myblock/
        _mod/
            b-myblock_mod_val1.css
        __opt-elem/
            b-myblock__opt-elem.css
        b-myblock.css
%%

This is how we write bem-bl library and most of the Lego blocks these days.

====A Folder for Everything!

You can have a separate folder for each element and each modifier, be it optional or not. This is very logical and clear, but you may find this consistent structure a bit more difficult to maintain:

%%hl xml
blocks/
    b-myblock/
        _mod/
            b-myblock_mod_val1.css
        __elem/
           b-myblock__elem.css
        b-myblock.css
%%

You'll be able to understand a block structure just from its folder structure, without even reading a single line of code. This is an unprecedented level of transparency, although it comes at a cost.

We are not yet fully determined to switch to this approach in Lego, but this is the most likely option.

===Summary
BEM is a development methodology that allows team members to collaborate and communicate ideas using the unified language consisting of simple yet powerful terms: blocks, elements, modifiers.

There is no such thing as "true BEM", and we don't try to create one. The implementation we offer is consistent and we like it a lot, but you may create your own and still call it BEM, as long as you stay true to the core principles.

BEM is a collection of ideas and methods, a *methodology*.\\
Each company and each team may integrate it into an existing workflow gradually, finding out what works best for them. 
